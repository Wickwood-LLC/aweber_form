<?php

/**
 * Implements hook_help().
 */
function aweber_webform_help($path, $arg) {
  if ($path == "admin/help#aweber_webform") {
    return t('<h3>About</h3><p>The AWeber Web Form module allows users with an AWeber account to add an
      <a href="http://www.aweber.com/web-forms.htm">AWeber web form</a> to a page.</p><h3>Uses</h3>
      <dl><dt>Installing an AWeber web form</dt><dd>You can start installing an AWeber web form that you have
      created - <a href="http://www.aweber.com/faq/questions/598" target="_blank">consult the AWeber knowledge
      base</a> for a walkthrough.</dd></dl><dl><dt>Evaluate web form performance</dt><dd>View web form
      statistics and performance data in your Drupal admin.</dd></dl><dl><dt>Preview web forms before publishing
      </dt><dd>See what a form looks like before adding it to your site.</dd></dl>');
    break;
  }
}

/**
 * Implements hook_block_info().
 */
function aweber_webform_block_info() {
  $blocks['aweber_webform'] = array(
    'info'  => t('AWeber Web Form'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Displays the Javascript URL of the selected webform or nothing if one
 * has not been selected.
 */
function aweber_webform_block_view($delta = ' ') {
  $block['subject'] = t('');
  $result = db_query("SELECT js_url FROM {aweber_webform}");
  foreach ($result as $row) {
    $js_url = $row->js_url;
  }
  if (user_access('access content')) {
    if (empty($js_url)) {
      $block['content'] = t('');
    }
    else {
      //If the web form is in db (selected), return Javascript for it.
      $block['content'] = "<script type=\"text/javascript\" src=\"{$js_url}\"></script>";
    }
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function aweber_webform_menu() {
  $items = array();

  $items['admin/config/content/aweber_webform'] = array(
    'title'            => 'AWeber Web Form',
    'description'      => 'Connect to your AWeber account and select the form that you would like to publish.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('aweber_webform_form'),
    'access arguments' => array('access administration pages'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_form().
 *
 * Returns one of the following Drupal forms:
 * a form that requests AWeber authorization,
 * a form that alerts there are no webforms in the account,
 * or a form prompting to select a webform.
 */
function aweber_webform_form($form, &$form_state) {
  require_once('aweber_api/aweber_api.php');
  require_once('aweber_webform.admin.inc');

  //Gets data from database.
  $result = db_query('SELECT consumer_key, consumer_secret, access_key, access_secret, js_url, lists, web_forms, split_tests, timestamp FROM {aweber_webform}');
  $row = $result->fetchAssoc();
  if (empty($row)) {
    db_insert('aweber_webform')->fields(
      array(
        'consumer_key'    => '',
        'consumer_secret' => '',
        'access_key'      => '',
        'access_secret'   => '',
        'timestamp'       => '0',
      )
    )->execute();
    $result = db_query('SELECT consumer_key, consumer_secret, access_key, access_secret, js_url, lists, web_forms, split_tests, timestamp FROM {aweber_webform}');
    $row = $result->fetchAssoc();
  }

  $consumer_key    = $row['consumer_key'];
  $consumer_secret = $row['consumer_secret'];
  $access_key      = $row['access_key'];
  $access_secret   = $row['access_secret'];
  $js_url          = $row['js_url'];
  $lists           = json_decode($row['lists'], TRUE);
  $web_forms       = json_decode($row['web_forms'], TRUE);
  $split_tests     = json_decode($row['split_tests'], TRUE);
  $timestamp       = $row['timestamp'];

  //Gets AWeber API set up.
  try {
    $aweber  = new AWeberAPI($consumer_key, $consumer_secret);
    $account = $aweber->getAccount($access_key, $access_secret);
  } catch (AWeberException $e) {
    //User is not authorized, so return authorization form.
    return AWeber_Webform::get_Auth_Key_Form($form, $form_state);
  }

  //If timed out or no data is stored, re-call the API.
  if ((empty($web_forms) && empty($split_tests)) || (time() > $timestamp)) {
    $web_forms = json_decode(json_encode($account->getWebForms()), TRUE);
    $split_tests = array();
    $temp_split_tests = $account->getWebFormSplitTests();
    //Adds split test components to split tests array.
    foreach ($temp_split_tests as $this_split_test) {
      array_push($split_tests, json_decode(json_encode($this_split_test), TRUE));
      $split_tests[count($split_tests)-1]['components'] =
        json_decode(json_encode($this_split_test->components), TRUE);
    }
    $lists = array();
    foreach ($account->lists as $this_list) {
      array_push($lists, $this_list->data);
    }
    $lists = json_decode(json_encode($lists), TRUE);
  }

  $list_web_forms = array();
  //For each web form, adds array index with the list id and value type (WF/ST).
  foreach ($web_forms as $this_webform) {
    $link_parts = explode('/', $this_webform['url']);
    $this_list_id = $link_parts[4];
    if (!array_key_exists($this_list_id, $list_web_forms)) {
      $list_web_forms[$this_list_id] = array(
        'web_forms'   => array(),
        'split_tests' => array()
      );
    }
    $list_web_forms[$this_list_id]['web_forms'][] = $this_webform;
  }

  //For each split test, adds array index with the list id and value type (WF/ST).
  foreach ($split_tests as $this_webform) {
    $link_parts = explode('/', $this_webform['url']);
    $this_list_id = $link_parts[4];
    if (!array_key_exists($this_list_id, $list_web_forms)) {
      $list_web_forms[$this_list_id] = array(
        'web_forms' => array(),
        'split_tests' => array()
      );
    }
    $list_web_forms[$this_list_id]['split_tests'][] = $this_webform;
  }

  //There are no web forms, return relevant form.
  if (empty($list_web_forms)) {
    return AWeber_Webform::get_Null_Form($form, $form_state);
  }
  else {
    //For each list, adds list data to the index in the array.
    foreach ($lists as $this_list) {
      if (array_key_exists($this_list['id'], $list_web_forms)) {
        $list_web_forms[$this_list['id']]['list'] = $this_list;
      }
    }

    $list_dropdown = array();
    $webform_dropdown = array();
    $default_webform = '';
    $default_list = '';

    $list_tables = array();
    //For each list, construct tables.
    foreach ($list_web_forms as $this_list_data) {
      $this_list = $this_list_data['list'];
      $list_dropdown[$this_list['id']] = $this_list['name'];
      $list_table = t('<div class="aweber_webform_webform_radiotables" id="aweber_webform_webform_radiotable_') . $this_list['id'] . t('">
        <h2 class="aweber_webform_header">Step 2: Select A Web Form or Split Test</h2>
        <br />
        <strong>Web Forms</strong>
        <table class="aweber_webform_table">
        <tr>
        <th></th>
        <th><label class="aweber_webform_help aweber_webform_table_webform_name">Name</label></th>
        <th><label class="aweber_webform_help aweber_webform_table_displays">Displays</label></th>
        <th><label class="aweber_webform_help aweber_webform_table_submissions">Submissions</label></th>
        <th><label class="aweber_webform_help aweber_webform_table_conv">S/D</label></th>
        <th><label class="aweber_webform_help aweber_webform_table_unique_displays">Unique Displays</label></th>
        <th><label class="aweber_webform_help aweber_webform_table_unique_conv">S/UD</label></th>
        <th><label class="aweber_webform_help aweber_webform_table_preview">Preview</label></th>
        </tr>');
      //For each web form, add a row.
      foreach ($this_list_data['web_forms'] as $this_form) {
        $checked = "";
        if ($this_form['data']['javascript_source_link'] == $js_url) {
          $default_list = $this_list['id'];
          $checked = 'checked="checked"';
        }
        $list_table .= t('<tr>
          <td style="text-align:center;"><input type="radio" name="aweber_webform_webform_') . $this_list['id'] .
          t('" value="') . $this_form['data']['javascript_source_link'] . t('"') . ' ' . $checked . ' ' . t('class="form-radio"/></td>
          <td>') . $this_form['data']['name'] . t('</td>
          <td>') . $this_form['data']['total_displays'] . t('</td>
          <td>') . $this_form['data']['total_submissions'] . t('</td>
          <td>') . number_format($this_form['data']['conversion_percentage'], 1) . t('%</td>
          <td>') . $this_form['data']['total_unique_displays'] . t('</td>
          <td>') . number_format($this_form['data']['unique_conversion_percentage'], 1) . t('%</td>
          <td><a href="') . $this_form['data']['html_source_link'] . t('" target="_blank">Preview</a></td>
          </tr>');
      }
      $list_table .= t('</table>');
      //If there are split tests, make table a for them.
      if (!empty($this_list_data['split_tests'])) {
        $list_table .= t('<br/><strong>Split Tests</strong>
          <table class="aweber_webform_table">
          <tr>
          <th></th>
          <th><label class="aweber_webform_help aweber_webform_table_splittest_name">Name</label></th>
          <th><label class="aweber_webform_help aweber_webform_table_webform_name">Web Form Name</label></th>
          <th><label class="aweber_webform_help aweber_webform_table_weight">Probability</label></th>
          <th><label class="aweber_webform_help aweber_webform_table_displays">Displays</label></th>
          <th><label class="aweber_webform_help aweber_webform_table_submissions">Submissions</label></th>
          <th><label class="aweber_webform_help aweber_webform_table_conv">S/D</label></th>
          <th><label class="aweber_webform_help aweber_webform_table_unique_displays">Unique Displays</labels></th>
          <th><label class="aweber_webform_help aweber_webform_table_unique_conv">S/UD</label></th>
          </tr>');
        //For each split test, add a row with corresponding class name.
        foreach ($this_list_data['split_tests'] as $this_form) {
          $checked = "";
          if ($this_form['data']['javascript_source_link'] == $js_url) {
            $default_list = $this_list['id'];
            $checked = t('checked="checked"');
            $currentFormName = $this_form['data']['name'];
            $currentFormListName = $this_list['name'];
          }
          $rowClassName = t('class="aweber_webform_splittest_border"');
          $list_table .= t('<tr><td') . ' ' . $rowClassName . ' ' . t('style="text-align:center;">
            <input type="radio" name="aweber_webform_webform_')
            . $this_list['id'] . t('" value="')
            . $this_form['data']['javascript_source_link'] . t('"') . ' ' . $checked . ' ' . t('class="form-radio"/></td>
            <td ') . $rowClassName . t('>') . $this_form['data']['name'] . t('</td>');
          $newrow = FALSE;
          foreach ($this_form['components']['data']['entries'] as $this_component) {
            if ($newrow) {
              $list_table .= t('<tr><td') . ' ' . $rowClassName . t('></td><td') . ' ' . $rowClassName . t('></td>');
            }
            if (!$newrow) $newrow = TRUE;
            $list_table .= t('<td') . ' ' . $rowClassName . t('>') . $this_component['name'] . t('</td>
              <td') . ' ' . $rowClassName . '>' . $this_component['weight'] . t('%</td>
              <td') . ' ' . $rowClassName . '>' . $this_component['total_displays'] . t('</td>
              <td') . ' ' . $rowClassName . '>' . $this_component['total_submissions'] . t('</td>
              <td') . ' ' . $rowClassName . '>' . number_format($this_component['conversion_percentage'], 1) . t('%</td>
              <td') . ' ' . $rowClassName . '>' . $this_component['total_unique_displays'] . t('</td>
              <td') . ' ' . $rowClassName . '>' . number_format($this_component['unique_conversion_percentage'], 1) . t('%</td>
              </tr>');
            $rowClassName = t('class="aweber_webform_splittest_noborder"');
          }
        }
        $list_table .= t('</table></div>');
      }
      else {
        $list_table .= t('</div>');
      }
      array_push($list_tables, $list_table);
    }
  }

  //Adds the deauthorize button.
  $form['deauth'] = AWeber_Webform::deauthorizeButton();

  //Adds the list selection.
  $form['aweber_webform_list'] = array(
    '#prefix'        => t('<h2 class="aweber_webform_header">Step 1: Select A List</h2>'),
    '#type'          => 'select',
    '#title'         => t(''),
    '#default_value' => $default_list,
    '#options'       => $list_dropdown,
    '#description'   => t(''),
    '#suffix'        => t('</td><td>')
  );

  //Adds the refresh button
  $form['refresh'] = AWeber_Webform::refreshButton();

  //Adds the tables to the page.
  foreach ($list_tables as $this_table) {
    $form[] = array(
      '#prefix' => $this_table,
    );
  }

  /* On button click, buttons will change text. Since the text changes,
   * Drupal will not recognize that button as 'clicked_button' in the form_state
   * because such a button with said attributes does not exist since the text of
   * the button is not what form_state has stored. To resolve this, I make 'fake'
   * buttons with the text of what it will change to, so the Drupal form will see
   * it as this this button was pressed, although the real button was pressed. */
  $form['refresh2'] = AWeber_Webform::refreshButtonFake();
  $form['deauth2']  = AWeber_Webform::deauthorizeButtonFake();
  $form['submit2']  = AWeber_Webform::submitButtonFake();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  db_update('aweber_webform')->fields(array(
    'lists'       => json_encode($lists),
    'web_forms'   => json_encode($web_forms),
    'split_tests' => json_encode($split_tests),
    'timestamp'   => time() + (5 * 60),
  ))->execute();

  return $form;
}

/**
 * Validates form submissions.
 *
 * If the submitted form was the authorization form, it will try to
 * authorize the account and store their data. If it
 * was the refresh button from any of the forms, it will reset the timestamp
 * so the code will re-call the API. If the webform select form was submitted,
 * it will check that all data fields were entered and it will store the
 * data.
 */
function aweber_webform_form_validate($form, &$form_state) {
  require_once('aweber_api/aweber_api.php');
  require_once('aweber_webform.admin.inc');

  //Checks if the submitted form was not the authorization form.
  if (!isset($form_state['values']['aweber_webform_authkey'])) {
    if ($form_state['clicked_button']['#name'] == 'deauth') {
      AWeber_Webform::deauthorize();
    }
    elseif ($form_state['clicked_button']['#name'] == 'refresh') {
      AWeber_Webform::refresh();
    }
    else {
      //Checks if a list was selected.
      if (!empty($form_state['values']['aweber_webform_list'])) {
        $list_id = $form_state['values']['aweber_webform_list'];
        //Checks if a web form was selected.
        if (!empty($form_state['input']['aweber_webform_webform_' . $list_id])) {
          //Stores the Javascript url of the selected form.
          db_update('aweber_webform')->fields(array(
            'js_url'  => $form_state['input']['aweber_webform_webform_' . $list_id],
          ))->execute();
        }
        else {
          form_set_error('aweber_webform_webform', t('Form Select field is required'));
        }
      }
      else {
        form_set_error('aweber_webform_list', t('List Select field is required'));
      }
    }
    return $form;
  }

  $authkey = $form_state['values']['aweber_webform_authkey'];

  //Tries to authorize the AWeber account.
  try {
    $data = AWeberAPI::getDataFromAweberID($authkey);
  } catch (AweberException $e) {
    form_set_error('aweber_webform_authkey', t('The Authorization Key provided was not valid.'));
    return $form;
  } if (empty($data)) {
    form_set_error('aweber_webform_authkey', t('The Authorization Key provided was not valid.'));
    return $form;
  }

  //Stores the data for the authorized account.
  list($consumer_key, $consumer_secret, $access_key, $access_secret) = $data;
  db_update('aweber_webform')->fields(array(
    'consumer_key'    => $consumer_key,
    'consumer_secret' => $consumer_secret,
    'access_key'      => $access_key,
    'access_secret'   => $access_secret,
  ))->execute();

  return $form;
}





